## template: jinja
#cloud-config

### Cloud-init for Docker + Traefik + Photostructure.
### Traefik takes care of HTTPs, renwewing the TLS certificate, and password authentication.

### This file contains what is called cloud-init 'User data', which you copy, and edit,
### in order to configure your own personal deployment, and
### all of its settings, in one file: *this* file. Save this file, edit it,
### and then when you create your droplet, you paste your edited version into the
### 'User data' section of the droplet creation screen on Digital Ocean
### (or theoretically any other cloud-init enabled environment/service.)
### From then on, the install is fully automatic.

### This is tested with the Digital Ocean Marketplace Docker application. This
### script does not install Docker, it assumes that Docker is already
### installed/ready-to-go in the droplet image. So when creating this droplet,
### don't choose regular Ubuntu, instead choose the Docker app from the
### Marketplace tab, which is maintained by Digital Ocean and has an up-to-date
### Docker version preinstalled. Then choose the droplet size and other details as you
### normally would. When you get to one of the checkboxes that says 'User data',
### check it, and paste this whole edited file (comments and all!) into the text
### box that appears. When you finish and create the droplet, it will
### automatically boot and setup everything exactly as you have configured in
### this file, without any further setup. Save this file for later, and it'll be
### nice and repeatable next time, just copy and paste. Neat, huh?

### The example below configures the Photostructure library in /storage/photos.
### This directory can be on the root filesystem of the droplet, or block storage,
### or a FUSE filesystem connected to Digital Ocean Spaces (like Amazon S3).
### This example assumes you are just using the root filesystem,
### but you can ssh into the machine and mount whatever storage you want, and it should work.

## You will also need to point your own domain name to the IP address of the droplet
## (or preferably, a floating IP address associated with the droplet, so that you
## can easily destroy and recreate droplets with new IP addresses.) You need to create
## a DNS-A record for your traefik_domain as defined below, as well as create a DNS-A wildcard
## record for "*.<traefik_domain>" so that any subdomain will also resolve to
## the droplet or floating IP address.

#################################################################################
### This is a Jinja2 templated cloud-config (as indicated by the very first line.)
### YOU NEED TO EDIT THE VARIABLES IN THIS SECTION BETWEEN ######### LINES
## This top section (until 'End variables') is the ONLY part you need to edit
## unless you're adapting this file to add new hosted apps/containers beyond
## what is already here.

### This section is for setting jinja variables for use in the rest of this script.
## Reference https://jinja.palletsprojects.com/en/2.9.x/templates/#assignments
## Use this Jinja2 syntax: {% set VARIABLE_NAME = VALUE %}

### traefik_domain
## The main (sub)domain for traefik and all hosted applications. For instance,
## if traefik_domain == 'd.example.com', all hosted apps will be hosted underneath
## the '*.d.example.com' subdomain, like 'app1.d.example.com', 'app2.d.example.com',
## etc. 
{% set traefik_domain = "d.example.com" %}

### traefik_dashboard
## Set to True to publicly expose the traefik dashboard (not usually needed; still requires user/pass to access)
{% set traefik_dashboard = False %}

### traefik_username
## Traefik dashboard username
{% set traefik_username = "traefik" %}

### traefik_password
## Traefik dashboard password
{% set traefik_password = "traefik" %}

### letsencrypt_email
## Your email address used when generating TLS/SSL certificates
{% set letsencrypt_email = "you@example.com" %}

### letsencrypt_use_production
## Start with False. If False, it will use the letsencrypt staging environment
## (good for testing and development, because it avoids the rate limiting that
## exists for the production environment. But your web browser will
## complain about the invalid certificate that you must click through to allow.)
## This should be set to True only when you are ready for a production
## deployment, when you control a real domain name and DNS, and you want a real
## TLS/SSL certificate that will be valid in all web browsers.
{% set letsencrypt_use_production = False %}

### photostructure_hostname
## The first part of the domain name for the photostructure app <photostructure_hostname>.<traefik_domain>
{% set photostructure_hostname = "photos" %}

### photostructure_library
## The path on the host to store the photostructure library
{% set photostructure_library = "/storage/photos" %}

### photostructure_auth
## if True, require a username/password combo to login to photostructure
{% set photostructure_auth = True %}

### photostructure_username
## The username necessary to login to photostructure
{% set photostructure_username = "photos" %}

### photostructure_password
## The password necessary to login to photostructure
{% set photostructure_password = "hunter2" %}

### End variables - STOP EDITING HERE unless you're developing new hosted apps.
################################################################################

## Jinja Macros - don't touch these - move along! See how they are used below
## under write_files.
{% macro traefik_labels(name, port, auth=False) -%}
"traefik.enable=true", "traefik.http.routers.{{ name }}.entrypoints=http", "traefik.http.routers.{{ name }}.rule=Host(`{{ name }}.{{ traefik_domain }}`)", "traefik.http.middlewares.{{ name }}-https-redirect.redirectscheme.scheme=https", "traefik.http.routers.{{ name }}.middlewares={{ name }}-https-redirect", "traefik.http.routers.{{ name }}-secure.entrypoints=https", "traefik.http.routers.{{ name }}-secure.rule=Host(`{{ name }}.{{ traefik_domain }}`)", "traefik.http.routers.{{ name }}-secure.tls=true", "traefik.http.routers.{{ name }}-secure.tls.certresolver=http", "traefik.http.services.{{ name }}.loadbalancer.server.port={{ port }}", {% if auth %}"traefik.http.middlewares.{{ name }}-auth.basicauth.users=USER_PASSWORD", "traefik.http.routers.{{ name }}-secure.middlewares={{ name }}-auth" {% endif %}
{%- endmacro %}

{% macro traefik_ca_server() -%}
{% if letsencrypt_use_production %}
"https://acme-v02.api.letsencrypt.org/directory"
{% else %}
"https://acme-staging-v02.api.letsencrypt.org/directory"
{% endif %}
{%- endmacro %}

################################################################################

## Jinja templated cloud-config follows:
write_files:
  ## acme.json is the file that keeps track of your TLS/SSL certificates as well
  ## as your Let's Encrypt account details. If you need to create and destroy
  ## your droplet several times (for testing/debug purposes), hanging onto this
  ## file across instance lifecycles will keep you from getting rate-limited in
  ## production. When using letsencrypt_use_production=False, it doesn't matter
  ## so much, as the rate-limits are way higher for the staging environment.
  - path: /opt/containers/traefik/data/acme.json
    permissions: '0600'
    content: ""
  ## traefik.yaml is the main traefik config file and sets the production or
  ## staging environment (caServer).
  - path: /opt/containers/traefik/data/traefik.yaml
    content: |
      api:
        dashboard: true

      entryPoints:
        http:
          address: ":80"
        https:
          address: ":443"
      
      providers:
        docker:
          endpoint: "unix:///var/run/docker.sock"
          exposedByDefault: false
      
      certificatesResolvers:
        http:
          acme:
            caServer: {{ traefik_ca_server() }}
            email: {{ letsencrypt_email }}
            storage: acme.json
            httpChallenge:
              entryPoint: http

  ## traefik/docker-compose.yaml sets up the Docker containers for Traefik and
  ## Whoami. Docker itself manages the startup of these containers when the
  ## droplet reboots (not systemd.) The example for whoami is a basis you can
  ## use for other apps, the traefik_labels() jinja macro makes standard docker
  ## labels needed for traefik, easier and more compact.
  - path: /opt/containers/traefik/docker-compose.yaml
    content: |
      version: '3'
      
      services:
        traefik:
          image: traefik:v2.0
          container_name: traefik
          restart: unless-stopped
          security_opt:
            - no-new-privileges:true
          networks:
            - proxy
          ports:
            - 80:80
            - 443:443
          volumes:
            - /etc/localtime:/etc/localtime:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /opt/containers/traefik/data/traefik.yaml:/traefik.yml:ro
            - /opt/containers/traefik/data/acme.json:/acme.json
          labels:
            - "traefik.enable=true"
            - "traefik.http.routers.traefik.entrypoints=http"
            - "traefik.http.routers.traefik.rule=Host(`traefik.{{ traefik_domain }}`)"
            - "traefik.http.middlewares.traefik-auth.basicauth.users=USER_PASSWORD"
            - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
            - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
            - "traefik.http.routers.traefik-secure.entrypoints=https"
            - "traefik.http.routers.traefik-secure.rule=Host(`traefik.{{ traefik_domain }}`)"
            - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
            - "traefik.http.routers.traefik-secure.tls=true"
            - "traefik.http.routers.traefik-secure.tls.certresolver=http"
            - "traefik.http.routers.traefik-secure.service=api@internal"
      
        whoami:
          image: containous/whoami
          restart: unless-stopped
          security_opt:
            - no-new-privileges:true
          networks:
            - proxy
          labels: [ {{ traefik_labels('whoami', '80') }} ]

      networks:
        proxy:
          external: true

  ## photostructure/docker-compose.yaml sets up the Docker container for Photostructure
  - path: /opt/containers/photostructure/docker-compose.yaml
    content: |
      version: '3.0'

      services:
        photostructure:
          image: photostructure/server
          environment:
            PS_HOST_SCAN_PATHS: /ps/library
            PS_SCAN_ALL_DRIVES: '1'
            PS_SCAN_MY_PICTURES: '1'
            PS_SCAN_PATHS: /ps/library
            PS_LOG_LEVEL: debug
            PS_LOG_COMPRESS: '1'
            PS_REQUIRE_MAKE_MODEL: '0'
            PS_SYNC_INTERVAL_HOURS: 2
            PS_MAX_CPU_PERCENT: 100
          volumes:
            - /opt/containers/photostructure/config:/ps/config:rw
            - {{ photostructure_library }}:/ps/library:rw
            - /opt/containers/photostructure/logs:/ps/logs:rw
            - /tmp/photostructure-docker:/ps/tmp:rw
          networks:
            - proxy
          labels: [ {{ traefik_labels(photostructure_hostname, '1787', photostructure_auth) }} ]
      
        watchtower:
          command: --interval 10800
          image: containrrr/watchtower
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock:rw
      
      networks:
        proxy:
          external: true

packages:
  ## Need to install htpasswd utility to generate the proper password format for traefik.
  - apache2-utils

runcmd:
  ## Convert the username and password fields into htpasswd format
  ## This replaces the placeholder text that the templates inserted.
  - sed -i.template 's@USER_PASSWORD@'"$(htpasswd -nb {{ traefik_username }} {{ traefik_password }} | sed -e s/\\$/\\$\\$/g | grep .)"'@' /opt/containers/traefik/docker-compose.yaml
  - sed -i.template 's@USER_PASSWORD@'"$(htpasswd -nb {{ photostructure_username }} {{ photostructure_password }} | sed -e s/\\$/\\$\\$/g | grep .)"'@' /opt/containers/photostructure/docker-compose.yaml
  ## Create the network that is used for traefik hosted apps
  - docker network create proxy
  ## Create and start the containers
  - docker-compose -f /opt/containers/traefik/docker-compose.yaml up -d
  - docker-compose -f /opt/containers/photostructure/docker-compose.yaml up -d
