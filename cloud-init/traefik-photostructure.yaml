## template: jinja
#cloud-config

### Cloud-init for Docker + Traefik + Photostructure.
### Traefik takes care of HTTPs, renwewing the TLS certificate, and password authentication.

### See the general README at
### https://github.com/PlenusPyramis/dockerfiles/blob/master/cloud-init

### For this example you will need the following:
### 1) A Digital Ocean account.
### 2) A 1GB volume created to store the traefik certificates (traefik_acme_volume).
### 3) A Domain name with DNS to point to the droplet or floating IP address.
### 4) An email address to use when registering Let's Encrypt certificates.

### The example below configures the Photostructure library in /storage/photos.
### This directory can be on the root filesystem of the droplet, or block storage,
### or a FUSE filesystem connected to Digital Ocean Spaces (like Amazon S3).
### This example assumes you are just using the root filesystem,
### but you can ssh into the machine and mount whatever storage you want, and it should work.

## You will also need to point your own domain name to the IP address of the droplet
## (or preferably, a floating IP address associated with the droplet, so that you
## can easily destroy and recreate droplets with new IP addresses.) You need to create
## a DNS-A record for your traefik_domain as defined below, as well as create a DNS-A wildcard
## record for "*.<traefik_domain>" so that any subdomain will also resolve to
## the droplet or floating IP address.

#################################################################################
### This is a Jinja2 templated cloud-config (as indicated by the very first line.)
### YOU NEED TO EDIT THE VARIABLES IN THIS SECTION BETWEEN ######### LINES
## This top section (until 'End variables') is the ONLY part you need to edit
## unless you're adapting this file to add new hosted apps/containers beyond
## what is already here.

### This section is for setting jinja variables for use in the rest of this script.
## Reference https://jinja.palletsprojects.com/en/2.9.x/templates/#assignments
## Use this Jinja2 syntax: {% set VARIABLE_NAME = VALUE %}

### traefik_domain
## The main (sub)domain for traefik and all hosted applications. For instance,
## if traefik_domain == 'd.example.com', all hosted apps will be hosted underneath
## the '*.d.example.com' subdomain, like 'app1.d.example.com', 'app2.d.example.com',
## etc. 
{% set traefik_domain = "d.example.com" %}

### letsencrypt_email
## Your email address used when generating TLS/SSL certificates
{% set letsencrypt_email = "you@example.com" %}

### traefik_acme_volume
### You must create a volume to store the Traefik acme.json file. It will store your certificates.
### Set the name of the external volume that you created.
### This volume will auto-mount to /mnt/traefik_acme
### By using an external volume, you can recreate the droplet without needing to regenerate certificates.
{% set traefik_acme_volume = "volume-nyc1-traefik-config" %}

### traefik_dashboard
## Set to True to publicly expose the traefik dashboard (not usually needed; still requires user/pass to access)
{% set traefik_dashboard = False %}

### traefik_username
## Traefik dashboard username (only used when traefik_dashboard enabled)
{% set traefik_username = "traefik" %}

### traefik_password
## Traefik dashboard password (only used when traefik_dashboard enabled)
{% set traefik_password = "traefik" %}

### letsencrypt_use_production Set to False to use the Let's Encrypt staging
### server. Since you have setup a volume for the acme.json file, it is safe to
### use True and use the production Let's Encrypt environment, even for
### development.
{% set letsencrypt_use_production = True %}

### photostructure_hostname
## The first part of the domain name for the photostructure app <photostructure_hostname>.<traefik_domain>
{% set photostructure_hostname = "photos" %}

### photostructure_library
## The path on the host to store the photostructure library
{% set photostructure_library = "/storage/photos" %}

### photostructure_auth
## if True, require a username/password combo to login to photostructure
{% set photostructure_auth = True %}

### photostructure_username
## The username necessary to login to photostructure
{% set photostructure_username = "photos" %}

### photostructure_password
## The password necessary to login to photostructure
{% set photostructure_password = "hunter2" %}

### gotify_enable
## Enable gotify notifications server
## Only works when letsencrypt_use_production=True
{% set gotify_enable = False %}

### gotify_user
## Gotify default user name
{% set gotify_user = "admin" %}

### gotify_password
## Gotify admin account default password
{% set gotify_password = "hunter2" %}

### End variables - STOP EDITING HERE unless you're developing new hosted apps.
################################################################################

## Jinja Macros - don't touch these - move along! See how they are used below
## under write_files.
{% macro traefik_labels(name, port, auth=False) -%}
"traefik.enable=true", "traefik.http.routers.{{ name }}.entrypoints=http", "traefik.http.routers.{{ name }}.rule=Host(`{{ name }}.{{ traefik_domain }}`)", "traefik.http.middlewares.{{ name }}-https-redirect.redirectscheme.scheme=https", "traefik.http.routers.{{ name }}.middlewares={{ name }}-https-redirect", "traefik.http.routers.{{ name }}-secure.entrypoints=https", "traefik.http.routers.{{ name }}-secure.rule=Host(`{{ name }}.{{ traefik_domain }}`)", "traefik.http.routers.{{ name }}-secure.tls=true", "traefik.http.routers.{{ name }}-secure.tls.certresolver=http" {% if port != None %}, "traefik.http.services.{{ name }}.loadbalancer.server.port={{ port }}"{% endif %}{% if auth %}, "traefik.http.middlewares.{{ name }}-auth.basicauth.users=REPLACE_USER_PASSWORD", "traefik.http.routers.{{ name }}-secure.middlewares={{ name }}-auth" {% endif %}
{%- endmacro %}

{% macro traefik_ca_server() -%}
{% if letsencrypt_use_production %}
"https://acme-v02.api.letsencrypt.org/directory"
{% else %}
"https://acme-staging-v02.api.letsencrypt.org/directory"
{% endif %}
{%- endmacro %}

################################################################################

## Jinja templated cloud-config follows:
write_files:
  ## traefik.yaml is the main traefik config file and sets the production or
  ## staging environment (caServer).
  - path: /opt/containers/traefik/data/traefik.yaml
    content: |
      entryPoints:
        http:
          address: ":80"
        https:
          address: ":443"

      {% if traefik_dashboard %}
      api:
        dashboard: true
      {% endif %}
      
      providers:
        docker:
          endpoint: "unix:///var/run/docker.sock"
          exposedByDefault: false
      
      certificatesResolvers:
        http:
          acme:
            caServer: {{ traefik_ca_server() }}
            email: {{ letsencrypt_email }}
            storage: acme.json
            httpChallenge:
              entryPoint: http

  ## traefik/docker-compose.yaml sets up the Docker containers for Traefik and
  ## Whoami. Docker itself manages the startup of these containers when the
  ## droplet reboots (not systemd.) The example for whoami is a basis you can
  ## use for other apps, the traefik_labels() jinja macro makes standard docker
  ## labels needed for traefik, easier and more compact.
  - path: /opt/containers/traefik/docker-compose.yaml
    content: |
      version: '3'
      
      services:
        traefik:
          image: traefik:v2.0
          container_name: traefik
          restart: unless-stopped
          security_opt:
            - no-new-privileges:true
          networks:
            - proxy
          ports:
            - 80:80
            - 443:443
          volumes:
            - /etc/localtime:/etc/localtime:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /opt/containers/traefik/data/traefik.yaml:/traefik.yml:ro
            - /mnt/traefik_acme/acme.json:/acme.json
          labels: [ {{ traefik_labels('traefik', port=None, auth=True) }}, "traefik.http.routers.traefik-secure.service=api@internal" ]
      
        whoami:
          image: containous/whoami
          restart: unless-stopped
          security_opt:
            - no-new-privileges:true
          networks:
            - proxy
          labels: [ {{ traefik_labels('whoami', '80') }} ]

      networks:
        proxy:
          external: true
  ## photostructure/docker-compose.yaml sets up the Docker container for Photostructure
  - path: /opt/containers/photostructure/docker-compose.yaml
    content: |
      version: '3.0'

      services:
        photostructure:
          image: photostructure/server
          security_opt:
            - no-new-privileges:true
          environment:
            PS_HOST_SCAN_PATHS: /ps/library
            PS_SCAN_ALL_DRIVES: 1
            PS_SCAN_MY_PICTURES: 1
            PS_SCAN_PATHS: /ps/library
            PS_LOG_LEVEL: debug
            PS_LOG_COMPRESS: 1
            PS_REQUIRE_MAKE_MODEL: 0
            PS_SYNC_INTERVAL_HOURS: 2
            PS_MAX_CPU_PERCENT: 100
          volumes:
            - /opt/containers/photostructure/config:/ps/config:rw
            - {{ photostructure_library }}:/ps/library:rw
            - /opt/containers/photostructure/logs:/ps/logs:rw
            - /tmp/photostructure-docker:/ps/tmp:rw
          networks:
            - proxy
          labels: [ {{ traefik_labels(photostructure_hostname, '1787', photostructure_auth) }} ]
            
      networks:
        proxy:
          external: true

  ## watchtower/docker-compose.yaml sets up the Docker container for Photostructure
  - path: /opt/containers/watchtower/docker-compose.yaml
    content: |
      version: '3.0'

      services:
        watchtower:
          command: --interval 10800
          image: containrrr/watchtower
          security_opt:
            - no-new-privileges:true
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock:rw

          {% if gotify_enable and letsencrypt_use_production %}

          environment:
            WATCHTOWER_NOTIFICATIONS: 'gotify'
            WATCHTOWER_NOTIFICATION_GOTIFY_URL: 'https://gotify.{{ traefik_domain }}/'
            WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN: 'REPLACE_GOTIFY_TOKEN'

          {% endif %}

  ## Gotify is an optional push notification server, this is the main config for it
  - path: /opt/containers/gotify/config/gotify.yaml
    content: |
      server:
        listenaddr: ""
        port: 80 
        ssl:
          enabled: false    
      
      database: 
        dialect: sqlite3
        connection: data/gotify.db
      
      passstrength: 10 
      uploadedimagesdir: data/images 
      pluginsdir: data/plugins 

      defaultuser:
        name: {{ gotify_user }} 
        pass: {{ gotify_password }}
    

  ## Gotify is an optional push notification server, this is the docker-compose for it:
  - path: /opt/containers/gotify/docker-compose.yaml
    content: |
      version: '3.0'

      services:
        gotify:
          image: gotify/server
          security_opt:
            - no-new-privileges:true
          volumes:
            - /opt/containers/gotify/config/gotify.yaml:/app/config.yml
          networks:
            - proxy
          labels: [ {{ traefik_labels("gotify", '80', auth=False) }} ]
            
      networks:
        proxy:
          external: true

packages:
  ## Need to install htpasswd utility to generate the proper password format for traefik.
  - apache2-utils
  - jq

runcmd:
  ## Mount Traefik acme.json from an external volume so that it survives droplet recreation:
  - mkdir -p /mnt/traefik_acme; mount -o discard,defaults /dev/disk/by-id/scsi-0DO_Volume_{{ traefik_acme_volume }} /mnt/traefik_acme; echo /dev/disk/by-id/scsi-0DO_Volume_{{ traefik_acme_volume }} /mnt/traefik_acme ext4 defaults,nofail,discard 0 0 | sudo tee -a /etc/fstab
  - df -h /mnt/traefik_acme | grep /mnt/traefik_acme$ || exit 1
  - touch /mnt/traefik_acme/acme.json
  - chmod 0600 /mnt/traefik_acme/acme.json
  ## Convert the username and password fields into htpasswd format
  ## This replaces the placeholder text that the templates inserted.
  - sed -i.template 's@REPLACE_USER_PASSWORD@'"$(htpasswd -nb {{ traefik_username }} {{ traefik_password }} | sed -e s/\\$/\\$\\$/g | grep .)"'@' /opt/containers/traefik/docker-compose.yaml
  - sed -i.template 's@REPLACE_USER_PASSWORD@'"$(htpasswd -nb {{ photostructure_username }} {{ photostructure_password }} | sed -e s/\\$/\\$\\$/g | grep .)"'@' /opt/containers/photostructure/docker-compose.yaml
  ## Create the network that is used for traefik hosted apps
  - docker network create proxy
  ## Create and start the containers
  - docker-compose -f /opt/containers/traefik/docker-compose.yaml up -d
  - docker-compose -f /opt/containers/photostructure/docker-compose.yaml up -d
{% if gotify_enable and letsencrypt_use_production %}
  - docker-compose -f /opt/containers/gotify/docker-compose.yaml up -d
  - until $(curl --output /dev/null --silent --fail https://gotify.{{ traefik_domain }}); do printf '.'; sleep 5; done;
  - sleep 20
  - WATCHTOWER_TOKEN=$(curl -u {{ gotify_user }}:{{ gotify_password }} -X POST https://gotify.{{ traefik_domain }}/application -F "name=watchtower" -F "description=Watchtower" | jq ".token" -r) && sed -i.template 's/REPLACE_GOTIFY_TOKEN/'"$WATCHTOWER_TOKEN"'/' /opt/containers/watchtower/docker-compose.yaml
{% endif %}
  - docker-compose -f /opt/containers/watchtower/docker-compose.yaml up -d
